-- Election Project
-- Zixin Qu (zixin.qu@rutgers.edu)

#API 1:
delimiter $$
create procedure API1(in in_newname varchar(20), in in_date datetime,in param_precinct varchar(100) ,out out_winner int )
begin
DECLARE v_Biden int;
DECLARE v_Trump int;
DECLARE v_timestamp  datetime;
	declare  var_check1 int;
	declare  var_check2 int;
 DECLARE v_maxtimestamp  datetime;
 DECLARE v_mintimestamp  datetime;
 
select count(*) into var_check2 from Penna where timestamp=in_date  ;
if var_check2 <= 0 then
  set out_winner=0;
   signal sqlstate 'HY000'
  set message_text = 'incorrect timestamp';
end if;
 
select count(*) into  var_check1 from Penna where precinct = param_precinct ;
if var_check1 <= 0 then
   set out_winner=0;
   signal sqlstate 'HY000'
  set message_text = 'incorrect precinct';
end if;

select max(`Timestamp`) into  v_maxtimestamp
from Penna  
where DATE_FORMAT(`Timestamp`,'%Y-%m-%d') =  DATE_FORMAT(in_date,'%Y-%m-%d');
	 
select min(`Timestamp`) into v_mintimestamp
from Penna  
 where DATE_FORMAT(`Timestamp`,'%Y-%m-%d') =  DATE_FORMAT(in_date,'%Y-%m-%d') ;
	 
 if in_date < v_mintimestamp then
     set out_winner=0;
   signal sqlstate 'HY000'
    set message_text = 'incorrect candidate';
	 end if;
	 
if in_newname = 'Biden'  then 

select Biden as out_winner 
from  Penna  where timestamp= v_maxtimestamp and  precinct =  param_precinct;

 ELSEIF  in_newname =  'Trump'  then 
 
 select Trump  as out_winner 
from Penna where timestamp= v_maxtimestamp and precinct =  param_precinct;

 else
       set out_winner=0;
       signal sqlstate 'HY000'
    set message_text = 'incorrect candidate';
 end if;
 
 end $$
delimiter ;
 
-- call wrong precinct
call API1('Biden','2020-11-06 19:10:53','abcddee',@qty);
select @qty;

 -- call correct precinct
call API1('Biden','2020-11-06 19:10:53','Hanover',@qty);
select @qty;

-- Query the data of the table
select *from  Penna 
where timestamp ='2020-11-06 19:10:53' and precinct='Hanover';



#API 2(date) £º
delimiter $$
create procedure API2(in param_date  date,out out_precinct varchar(200))
begin
DECLARE v_Biden int;
DECLARE v_Trump int;
DECLARE v_timestamp  date;

select timestamp,sum(Biden) as Biden ,sum(Trump) as Trump
into v_timestamp,v_Biden,v_Trump
from Penna 
where timestamp =( select max(timestamp) from  Penna  
where DATE_FORMAT(timestamp,'%Y-%m-%d') = param_date)
 group by timestamp;
 
if v_Biden < v_Trump then
   set out_precinct = concat('the last timestamp:',v_timestamp,' , Trump¡®s votes:', v_Trump);
 else
   set out_precinct = concat('the last timestamp:',v_timestamp,' , Biden¡®s votes:', v_Biden);
end if;

end $$
delimiter ;

-- call
call API2('2020-11-06',@out_precinct);
select @out_precinct;



#API 3:
delimiter $$
create procedure API3(in param_precinct varchar(20) )
begin
DECLARE  out_precinct  Varchar(50);
if param_precinct =  'Biden'  then 
select precinct ,max(totalvotes)  as totalvotes 
from  Penna    where  Biden >Trump
 group by precinct order by 2 desc  limit 10;

 ELSEIF  param_precinct =  'Trump'  then 
 select precinct ,max(totalvotes)  as totalvotes 
 from  Penna    where  Biden < Trump
 group by precinct order by 2 desc  limit 10;

 else
   SET out_precinct = 'incorrect candidate';
       signal sqlstate 'HY000'
    set message_text = 'incorrect candidate';
 end if ;

end $$
delimiter ;

-- call
call API3('Biden');
call API3('Trump');
--  call wrong candidate
call API3('BidenTrump');



#API 4:
delimiter $$
create procedure API4(in param_precinct varchar(100) ,out out_winner varchar(200))
begin
DECLARE out_precinct  Varchar(100);
DECLARE v_Biden int;
DECLARE v_Trump int;
DECLARE v_percentBiden float;
DECLARE v_percentTrump float;

declare  var_check1 int;

select count(*)   into  var_check1   from  Penna  where precinct = param_precinct ;
if var_check1 <= 0 then
set out_winner=0;
   set out_winner=0;
   signal sqlstate 'HY000'
  set message_text = 'incorrect precinct';
end if ;


select precinct,sum(Biden) as  Biden,sum(Trump) as Trump,
round( sum(Biden)/ sum(totalvotes) * 100,2) as Bidenpercent,
round( sum(Trump)/ sum(totalvotes) * 100,2) as Trumppercent
into out_precinct,v_Biden,v_Trump,v_percentBiden,v_percentTrump
  from  Penna  where   trim(precinct)  = param_precinct
 group by precinct;
 
if v_Biden < v_Trump  then
   set out_winner = concat(out_precinct , ' winner:' ,' Trump , percentage of total: ', 

v_percentTrump,'%');
 else
   set out_winner = concat(out_precinct , ' winner:' ,' Biden , percentage of total: ', 

v_percentBiden ,'%');
end if;

end $$
delimiter ;

-- call wrong precinct
call API4('Lower',@out_winner);
select @out_winner;

-- call correct precinct
call API4('Lower Providence 1-1',@out_winner);
select @out_winner;

call API4('Lower Providence 2-4',@out_winner);
select @out_winner;



#API 5:
delimiter $$
create procedure API5(in param_precinct varchar(100) ,out out_winner2 varchar(200))
begin
DECLARE v_Biden int;
DECLARE v_Trump int;
declare  var_check1 int;

select count(*)   into  var_check1   from  Penna   where  locate(param_precinct, precinct) > 0 ;
if var_check1 <= 0 then
set out_winner2 =0;
   set out_winner2=0;
   signal sqlstate 'HY000'
  set message_text = 'incorrect precinct';
end if ;

select sum(Biden) as  Biden,sum(Trump) as Trump
into  v_Biden,v_Trump
 from  Penna where  locate(param_precinct, precinct) > 0 ;
 
if v_Biden < v_Trump  then
   set out_winner2 = concat(param_precinct , ' winner:' ,' Trump , how many votes: ', v_Trump );
 else
   set out_winner2 = concat(param_precinct , ' winner:' ,' Biden ,how many votes: ', v_Biden  );
end if;

end $$
delimiter ;


-- call wrong precinct
call API5('abccddeeee',@out_winner);
select @out_winner;
-- call correct precinct
call API5('Township',@out_winner);
select @out_winner;




#PART2£¨30%£©
#1) newPenna():
DROP TABLE IF EXISTS `newPenna`;
CREATE TABLE `newPenna`  (
   `ID` int  AUTO_INCREMENT  PRIMARY KEY,
	 `precinct` varchar(100) ,
  `Timestamp` datetime NULL DEFAULT NULL,
  `newvotes` int(11) NULL DEFAULT NULL,
  `new_Trump` int(11) NULL DEFAULT NULL,
  `new_Biden` int(11) NULL DEFAULT NULL
) ;

 delimiter $$
create procedure newPenna(in in_newPenna varchar(100),in in_date datetime)
begin
 -- define local variable
 declare  var_date datetime;
	declare  var_totalvotes int;
	declare  var_Trump  int ;
	declare  var_Biden  int ;
	declare  old_totalvotes int;
	declare  old_Trump  int ;
	declare  old_Biden  int ;
	
	declare  out_totalvotes int;
	declare  out_new_Trump  int ;
	declare  out_new_Biden  int ;
	declare  var_check1 int;

-- traversal data and flag
    DECLARE done INT DEFAULT FALSE;
		
 -- declare cursor
	declare my_cursor cursor for
	select `Timestamp`,totalvotes,Trump,Biden
   from Penna  
   where timestamp < in_date  and precinct = in_newPenna
   and  DATE_FORMAT(`Timestamp`,'%Y-%m-%d') =  DATE_FORMAT(in_date,'%Y-%m-%d') 
	 order by `Timestamp` ;
	 
	 -- Bind the end flag to the cursoraa
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    
select count(*)   into  var_check1   from  Penna  where precinct = in_newPenna ;
if var_check1 <= 0 then
   signal sqlstate 'HY000'
  set message_text = 'incorrect precinct';
end if ;


 -- open cursor
	open my_cursor;
    
 -- Get the value through the cursor
	read_loop:loop
		FETCH  NEXT from my_cursor into var_date,old_totalvotes,old_Trump,old_Biden;
	IF done THEN
       LEAVE read_loop;
     END IF; 
	end loop ;
 -- close cursor
 close my_cursor;
 
 select totalvotes,Trump,Biden into var_totalvotes,var_Trump,var_Biden
 from  Penna  
 where `Timestamp`=in_date  and precinct=in_newPenna
  and  DATE_FORMAT(`Timestamp`,'%Y-%m-%d') =  DATE_FORMAT(in_date,'%Y-%m-%d') ;
 
  set  out_totalvotes= var_totalvotes - old_totalvotes;
  set  out_new_Trump= var_Trump - old_Trump;
  set  out_new_Biden= var_Biden - old_Biden ;
 
  insert into newPenna (precinct,`Timestamp`,newvotes,new_Trump, new_Biden)
  values(in_newPenna,in_date,out_totalvotes,out_new_Trump, out_new_Biden);
 
end$$
delimiter ;

 
 -- call wrong precinct
call newPenna('abcdeeff','2020-11-06 19:10:53');
select @out_winner;


 -- call correct precinct
 call newPenna('Hanover','2020-11-06 19:10:53');
-- query data
select * from newPenna;


#£¨2£©Switch():
delimiter $$
create procedure Switch()
begin

select old.precinct ,old.Timestamp,old.fromCandidate,new.toCandidate  from 
( select precinct,Timestamp, Biden,Trump, 'Trump' as fromCandidate, 0  as   voteold
from Penna  
where Timestamp <  (select max(Timestamp)  from Penna )  
and Timestamp >= ( (select max(Timestamp)  from Penna ) - interval 24  hour ) 
and  Biden < Trump  ) as old
left join 
(select precinct,Timestamp,Biden,Trump, 'Biden' as toCandidate, 1  as  votenew
from Penna  
where Timestamp =  (select max(Timestamp)  from Penna )  and   Biden >Trump ) as new
on old.precinct= new.precinct
where old.voteold <>  new.votenew
order by  old.Timestamp,old.precinct;

end $$
delimiter ;

-- call
call Switch();
call Switch('Hanover', '2020-11-07 16:41:11', 'Trump','Biden') ;




#PART 3:
delimiter $$
create procedure newP3CHECK(out is_chek boolean )
begin
 -- define local variable
	declare  var_check1 int;
	declare  var_check2 int;
	declare  var_check3 int;
	declare  var_check4 int;
	declare  var_check5 int;
	
     set is_chek =false;
   
select count(*)  into  var_check1  from  Penna  where totalvotes < Trump + Biden;
if var_check1 >0 then
 set is_chek =false;
   signal sqlstate 'HY000'
  set message_text = 'FALSE ( constraint is not satisfied)';
end if ;

select count(*)   into  var_check2   from  Penna  where timestamp >'2020-11-11 23:59:59'  ;
if var_check2 >0 then
  set is_chek =false;
   signal sqlstate 'HY000'
  set message_text = 'FALSE ( constraint is not satisfied)';
end if ;

select count(*)   into  var_check3   from  Penna  where DATE_FORMAT(timestamp,'%Y-%m-%d') > '2020-11-11';
if var_check3>0 then
 set is_chek =false;
   signal sqlstate 'HY000'
  set message_text = 'FALSE ( constraint is not satisfied)';
end if ;

select count(*)   into  var_check4   from  Penna  where  DATE_FORMAT(timestamp,'%Y-%m-%d') <'2020-10-03';

if var_check4>0 then
   set is_chek =false;
   signal sqlstate 'HY000'
  set message_text = 'FALSE ( constraint is not satisfied)';
end if ;

select  count(*) into  var_check5  
 from  ( select timestamp,precinct,totalvotes  as maxtotal from  Penna 
	 where timestamp= (select max(timestamp)  from  Penna where DATE_FORMAT(timestamp,'%Y-%m-%d') ='2020-11-05' )  ) a,
(  select timestamp,precinct,totalvotes as mintotal  from  Penna
   where timestamp= (select min(timestamp)  from  Penna where DATE_FORMAT(timestamp,'%Y-%m-%d') ='2020-11-05' )  ) b
where  a.precinct= b.precinct 
and  a.maxtotal < b.mintotal ;

if var_check5>0 then
   set is_chek =false;
   signal sqlstate 'HY000'
  set message_text = 'FALSE ( constraint is not satisfied)';
end if ;

 set is_chek = TRUE;
 
end $$
delimiter ;

-- call
call newP3CHECK(@retnrn);
select @retnrn;



#PART 4:
#4.1 Trigger
DROP TABLE IF EXISTS `Updated_Tuples`;
CREATE TABLE `Updated_Tuples`  (
  `ID` int(11) NULL DEFAULT NULL,
  `Timestamp` datetime NULL DEFAULT NULL,
  `state` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `locality` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `precinct` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `geo` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `totalvotes` int(11) NULL DEFAULT NULL,
  `Biden` int(11) NULL DEFAULT NULL,
  `Trump` int(11) NULL DEFAULT NULL,
  `filestamp` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL
) ;
DROP TABLE IF EXISTS `Inserted_Tuples`;
CREATE TABLE `Inserted_Tuples`  (
  `ID` int(11) NULL DEFAULT NULL,
  `Timestamp` datetime NULL DEFAULT NULL,
  `state` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `locality` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `precinct` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `geo` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `totalvotes` int(11) NULL DEFAULT NULL,
  `Biden` int(11) NULL DEFAULT NULL,
  `Trump` int(11) NULL DEFAULT NULL,
  `filestamp` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL
) ;
DROP TABLE IF EXISTS `Deleted_Tuples`;
CREATE TABLE `Deleted_Tuples`  (
  `ID` int(11) NULL DEFAULT NULL,
  `Timestamp` datetime NULL DEFAULT NULL,
  `state` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `locality` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `precinct` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `geo` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `totalvotes` int(11) NULL DEFAULT NULL,
  `Biden` int(11) NULL DEFAULT NULL,
  `Trump` int(11) NULL DEFAULT NULL,
  `filestamp` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL
) ;
DROP TABLE IF EXISTS `BAK_Tuples`;
CREATE TABLE `BAK_Tuples`  (
  `ID` int(11) NULL DEFAULT NULL,
  `Timestamp` datetime NULL DEFAULT NULL,
  `state` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `locality` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `precinct` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `geo` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `totalvotes` int(11) NULL DEFAULT NULL,
  `Biden` int(11) NULL DEFAULT NULL,
  `Trump` int(11) NULL DEFAULT NULL,
  `filestamp` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL
) ;

--  INSERT Trigger
DELIMITER $$
CREATE TRIGGER trg_insert_Tuples  AFTER INSERT ON `BAK_Tuples`
    FOR EACH ROW BEGIN
    insert into Inserted_Tuples(`ID`,`Timestamp`,`state`,`locality`,`precinct`,`geo`,`totalvotes`,`Biden` ,`Trump`,`filestamp`)
	 values (new.`ID`,new.`Timestamp`,new.`state`,new.`locality`,new.`precinct`,new.`geo`,new.`totalvotes`,new.`Biden` ,new.`Trump`,new.`filestamp` );
  END$$
DELIMITER ;

-- Check whether the trigger is successfully queried
SHOW TRIGGERS  ;

-- Query the result before insertion
select * from  Inserted_Tuples;

-- Insert data
insert into BAK_Tuples(`ID`,`Timestamp`,`state`,`locality`,`precinct`,`geo`,`totalvotes`,`Biden` ,`Trump`,`filestamp`)
select  `ID`,`Timestamp`,`state`,`locality`,`precinct`,`geo`,`totalvotes`,`Biden` ,`Trump`,`filestamp`
from  Penna  
where timestamp ='2020-11-06 19:10:53' and precinct='Hanover';

-- Query result after insertion
select * from BAK_Tuples
union all
select * from  Inserted_Tuples;
select * from  Updated_Tuples;
select * from  Deleted_Tuples;

  --  update Trigger
DELIMITER $$
CREATE TRIGGER  trg_Updated_Tuples  AFTER update   ON `BAK_Tuples`
    FOR EACH ROW BEGIN
 insert into Updated_Tuples(`ID`,`Timestamp`,`state`,`locality`,`precinct`,`geo`,`totalvotes`,`Biden` ,`Trump`,`filestamp`)
  values (old.`ID`,old.`Timestamp`,old.`state`,old.`locality`,old.`precinct`,old.`geo`,old.`totalvotes`,old.`Biden` ,old.`Trump`,
  old.`filestamp` );
    END$$
DELIMITER ;


-- Check whether the trigger is successfully queried
SHOW TRIGGERS  ;

-- Query the result before update
select * from  Updated_Tuples;

-- update data
SET SQL_SAFE_UPDATES = 0;
update BAK_Tuples set totalvotes = totalvotes + 1000 
where timestamp ='2020-11-06 19:10:53' and precinct='Hanover';

-- Updated query result
select * from BAK_Tuples
union all
select * from  Updated_Tuples;


  --  Delete Trigger 
DELIMITER $$
CREATE TRIGGER  trg_delete_Tuples  AFTER DELETE  ON `BAK_Tuples`
    FOR EACH ROW BEGIN
	
	insert into Deleted_Tuples(`ID`,`Timestamp`,`state`,`locality`,`precinct`,`geo`,`totalvotes`,`Biden` ,`Trump`,`filestamp`)
	 values (old.`ID`,old.`Timestamp`,old.`state`,old.`locality`,old.`precinct`,old.`geo`,old.`totalvotes`,old.`Biden` ,old.`Trump`,old.`filestamp` );
	 
END$$
DELIMITER ;


-- Check whether the trigger is successfully queried
SHOW TRIGGERS;

-- Query the result before delete
select * from  Deleted_Tuples;

-- Before delete
delete from  BAK_Tuples 
where timestamp ='2020-11-06 19:10:53' and precinct='Hanover';

-- Query the result after delete
select * from BAK_Tuples
union all
select * from  Deleted_Tuples;




#4.2 MoveVote():
drop   procedure newP3CHECK;
For example MoveVotes(Red Hill, 2020-11-06 15:38:36,¡¯Trump¡¯,100) will remove 100 votes from Trump and move it to Biden at 2020-11-06 15:38:36 and all future timestamps after that in the Red Hill precinct. 

delimiter $$
create procedure MoveVotes(in param_precinct varchar(100) ,in in_date datetime,in in_newname varchar(20),in Number_of_Moved_Votes int,out out_return varchar(100) )

begin
 -- Declare local variable
	declare  var_check1 int;
	declare  var_check2 int;
	declare  var_check3 int;

DECLARE v_Biden int;
DECLARE v_Trump int;

select count(*)   into  var_check1   from  Penna  where timestamp=in_date  ;
if var_check1 <= 0 then
   set out_return='Unknown Timestamp';
   signal sqlstate 'HY000'
  set message_text = 'Unknown Timestamp';
end if ;

select count(*)   into  var_check2  from  Penna   where precinct = param_precinct ;
if var_check2 <= 0 then
   set out_return='wrong precinct name';
   signal sqlstate 'HY000'
  set message_text = 'wrong precinct name';
end if ;

if Number_of_Moved_Votes <= 0 then
 set out_return='Not enough votes';
  signal sqlstate 'HY000'
  set message_text = 'Not enough votes';
end if ;

if in_newname =  'Biden'  then 

select Biden  into v_Biden
from  Penna  where timestamp= in_date and  precinct =  param_precinct;

 if v_Biden  < Number_of_Moved_Votes  then 
 set out_return='Not enough votes';
  signal sqlstate 'HY000'
  set message_text = 'Not enough votes';
end if ;

 ELSEIF  in_newname =  'Trump'  then 
 
 select Trump  into v_Trump
from  Penna  where timestamp= in_date and  precinct =  param_precinct;

if v_Trump  < Number_of_Moved_Votes  then
 
  set out_return='Not enough votes';
  signal sqlstate 'HY000'
  set message_text = 'Not enough votes';
end if ;

 else
       set out_return='wrong candidate name';
       signal sqlstate 'HY000'
    set message_text = 'wrong candidate name';
 end if ;
 

 if in_newname =  'Biden'  then 

-- Update Data
update Penna set Trump = Trump + Number_of_Moved_Votes ,Biden = Biden -  Number_of_Moved_Votes
where timestamp >= in_date and  precinct =  param_precinct;

  	 set out_return='Biden update true';
	
 ELSEIF  in_newname =  'Trump'  then 
 
 update Penna set Trump = Trump -  Number_of_Moved_Votes ,Biden = Biden +  Number_of_Moved_Votes
 where timestamp >= in_date and  precinct =  param_precinct;
  
	 set out_return='Trump update true';
	
 else
       set out_return='wrong candidate name';
       signal sqlstate 'HY000'
    set message_text = 'wrong candidate name';
 end if ;
 
end $$
delimiter ;


-- call wrong precinct name
call MoveVotes('abcdeeff','2020-11-06 15:38:36','Trump',100,@returntxt );
select @returntxt;

-- call wrong timestamp, need show: Unknown Timestamp
call MoveVotes('Hanover','2020-01-06 15:38:36','Trump',100,@returntxt );
select @returntxt;

-- call wrong negative votes, need show: Not enough votes
call MoveVotes('Hanover','2020-11-06 15:38:36','Trump',-100,@returntxt );
select @returntxt;
 
-- call wrong positive votes, show: Not enough votes
call MoveVotes('Red Hill','2020-11-06 15:38:36','Trump',999999,@returntxt );
select @returntxt;

-- call wrong candidate, need show:  ¡°wrong candidate name
call MoveVotes('Red Hill','2020-11-06 15:38:36','ABCD',100,@returntxt );
select @returntxt;

-- Query the result before the execution
select * from  Penna  where timestamp >='2020-11-06 15:38:36' and precinct='Red Hill';

-- The information that invokes the correct information requires a corresponding reduction in data
call MoveVotes('Red Hill','2020-11-06 15:38:36','Trump',100,@returntxttrue );
select @returntxttrue;

-- Query results are updated after the command is executed 
select * from  Penna  where timestamp >='2020-11-06 15:38:36' and precinct='Red Hill';

